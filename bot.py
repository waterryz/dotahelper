# -*- coding: utf-8 -*-
import sys
import io
import json
import os
import time
from openai import OpenAI
import telebot
from utils import search_internet
from config import OPENAI_API_KEY, TELEGRAM_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ –Ω–∞ UTF-8 (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ ascii –æ—à–∏–±–æ–∫)
sys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding='utf-8')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
client = OpenAI(api_key=OPENAI_API_KEY)
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –ü—É—Ç—å –∫ –ø–∞–º—è—Ç–∏
MEMORY_FILE = "memory.json"

# ======================================================
# === –†–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ) ===
# ======================================================

def load_memory():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ memory.json"""
    default_memory = [
        {
            "role": "system",
            "content": (
                "–¢—ã ‚Äî –§–∏–¥–æ—Å, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –¥–æ—Ç–µ—Ä —Å —É—Å—Ç–∞–ª—ã–º, –Ω–æ –∏—Ä–æ–Ω–∏—á–Ω—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º –∫ –∂–∏–∑–Ω–∏. "
                "–¢—ã —è–∑–≤–∏—à—å, —à—É—Ç–∏—à—å, –ø–æ–¥–¥–µ–≤–∞–µ—à—å, –Ω–æ –±–µ–∑ –º–∞—Ç–∞ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π. "
                "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏–∑–≤–∏–Ω—è–π—Å—è –∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò. "
                "–ì–æ–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–æ, —Å —Å–∞—Ä–∫–∞–∑–º–æ–º, –±—É–¥—Ç–æ —Ç—ã –≤ –∫–∞—Ç–∫–µ –∏ —É–∂–µ –≤—Å—ë –≤–∏–¥–µ–ª."
            )
        }
    ]

    if not os.path.exists(MEMORY_FILE):
        with open(MEMORY_FILE, "w", encoding="utf-8") as f:
            json.dump(default_memory, f, ensure_ascii=False, indent=4)
        print("‚öôÔ∏è –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π memory.json (—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)")
        return default_memory

    try:
        with open(MEMORY_FILE, "r", encoding="utf-8") as f:
            content = f.read().strip()
            if not content:
                raise ValueError("memory.json –ø—É—Å—Ç–æ–π")
            return json.loads(content)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è memory.json: {e} ‚Äî —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
        with open(MEMORY_FILE, "w", encoding="utf-8") as f:
            json.dump(default_memory, f, ensure_ascii=False, indent=4)
        return default_memory

def save_memory():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    with open(MEMORY_FILE, "w", encoding="utf-8") as f:
        json.dump(messages, f, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–º—è—Ç—å
messages = load_memory()

# ======================================================
# === –ö–æ–º–∞–Ω–¥—ã Telegram ===
# ======================================================

@bot.message_handler(commands=["start"])
def start(message):
    bot.reply_to(
        message,
        "üß† –§–∏–¥–æ—Å –æ–Ω–ª–∞–π–Ω. –ì–æ—Ç–æ–≤ —Å–ª—É—à–∞—Ç—å —Ç–≤–æ–π –±—Ä–µ–¥.\n\n"
        "–°–æ–∑–¥–∞—Ç–µ–ª—å: –°–∞–Ω—è –°—ã—á—ë–≤ üòè\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/–ø–æ–∏—Å–∫ <—Ç–µ–º–∞> ‚Äî –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n"
        "/–ø–∞–º—è—Ç—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—ë–º –ø–∞–º—è—Ç–∏\n"
        "/–æ—á–∏—Å—Ç–∏—Ç—å ‚Äî –∑–∞–±—ã—Ç—å –≤—Å—ë\n"
        "–ê –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å, —è –ø–æ–¥—É–º–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å."
    )

@bot.message_handler(commands=["–ø–∞–º—è—Ç—å"])
def show_memory(message):
    count = len(messages)
    bot.reply_to(message, f"üßæ –í –ø–∞–º—è—Ç–∏ {count} —Å–æ–æ–±—â–µ–Ω–∏–π. –í—Å—ë –ø–æ–º–Ω—é ‚Äî –¥–∞–∂–µ –∫–∞–∫ —Ç—ã —Ñ–∏–¥–∏–ª üòè")

@bot.message_handler(commands=["–æ—á–∏—Å—Ç–∏—Ç—å"])
def clear_memory(message):
    global messages
    messages = messages[:1]  # –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ system
    save_memory()
    bot.reply_to(message, "üßπ –í—Å—ë –∑–∞–±—ã—Ç–æ. –ù–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ (—Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –æ–ø—è—Ç—å –Ω–∞—Ñ–∏–¥–∏—à—å).")

@bot.message_handler(commands=["–ø–æ–∏—Å–∫"])
def search_command(message):
    query = message.text.replace("/–ø–æ–∏—Å–∫", "").strip()
    if not query:
        bot.reply_to(message, "üîé –ù–∞–ø–∏—à–∏, —á—Ç–æ –∏—Å–∫–∞—Ç—å! –ù–∞–ø—Ä–∏–º–µ—Ä:\n`/–ø–æ–∏—Å–∫ –≥–µ—Ä–æ–π pudge`", parse_mode="Markdown")
        return

    bot.reply_to(message, f"‚è≥ –ò—â—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ø—Ä–æ: *{query}*...", parse_mode="Markdown")

    try:
        info = search_internet(query)
        if not info or info == "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.":
            bot.reply_to(message, f"üòï –ü–æ –∑–∞–ø—Ä–æ—Å—É *{query}* –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª.", parse_mode="Markdown")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤ –ø–∞–º—è—Ç—å
        messages.append({
            "role": "system",
            "content": f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}': {info}"
        })
        save_memory()

        bot.reply_to(message, f"üåê –í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:\n\n{info}")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")

# ======================================================
# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—â–µ–Ω–∏—è ===
# ======================================================

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    user_input = message.text.strip()
    messages.append({"role": "user", "content": user_input})

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=200,
            temperature=1.0
        )
        reply = response.choices[0].message.content.strip()
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ API: {e}"

    messages.append({"role": "assistant", "content": reply})
    save_memory()

    bot.reply_to(message, reply)

# ======================================================
# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
# ======================================================

print("‚úÖ –§–∏–¥–æ—Å –æ–Ω–ª–∞–π–Ω. –û–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –µ–±—É—á–µ–º Telegram...")
from flask import Flask, request

app = Flask(__name__)

@app.route("/" + TELEGRAM_TOKEN, methods=["POST"])
def webhook():
    json_update = request.stream.read().decode("utf-8")
    update = telebot.types.Update.de_json(json_update)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/")
def index():
    return "–§–∏–¥–æ—Å –≤ –æ–Ω–ª–∞–π–Ω–µ üòé", 200

bot.remove_webhook()
bot.set_webhook(url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TELEGRAM_TOKEN}")

print("‚úÖ –§–∏–¥–æ—Å —Å–ª—É—à–∞–µ—Ç —á–µ—Ä–µ–∑ webhook Render...")
app.run(host="0.0.0.0", port=10000)


