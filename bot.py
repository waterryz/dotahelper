import os
import asyncio
import requests
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("7641143202:AAHN6GuQQrGXI4tsGwlmUR0rC3ABPohiqlc")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ===========================
# üî• –ü–ê–†–°–ò–ù–ì DOTABUFF
# ===========================

def get_meta_heroes():
    """–ü–∞—Ä—Å–∏—Ç —Ç–æ–ø-10 –≥–µ—Ä–æ–µ–≤ –∏–∑ Dotabuff (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ meta)"""
    url = "https://www.dotabuff.com/heroes/meta"
    headers = {"User-Agent": "Mozilla/5.0"}
    r = requests.get(url, headers=headers)
    soup = BeautifulSoup(r.text, "lxml")

    heroes = []
    table = soup.find("table", class_="sortable")
    if not table:
        return ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Dotabuff"]

    rows = table.find_all("tr")[1:11]  # –ø–µ—Ä–≤—ã–µ 10 –≥–µ—Ä–æ–µ–≤
    for row in rows:
        cols = row.find_all("td")
        hero = cols[1].text.strip()
        win_rate = cols[2].text.strip()
        popularity = cols[3].text.strip()
        heroes.append(f"{hero} ‚Äî üèÜ {win_rate} WR | üìà {popularity}")
    return heroes


def get_hero_items(hero: str):
    """–ü–∞—Ä—Å–∏—Ç —Ç–æ–ø-10 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≥–µ—Ä–æ—è —Å Dotabuff"""
    url = f"https://www.dotabuff.com/heroes/{hero}/items"
    headers = {"User-Agent": "Mozilla/5.0"}
    r = requests.get(url, headers=headers)
    soup = BeautifulSoup(r.text, "lxml")

    items = []
    table = soup.find("table", class_="sortable")
    if not table:
        return ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–±–æ—Ä–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –∏–º—è –≥–µ—Ä–æ—è —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ."]

    rows = table.find_all("tr")[1:11]  # —Ç–æ–ø-10 –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    for row in rows:
        cols = row.find_all("td")
        if len(cols) >= 3:
            item_name = cols[1].text.strip()
            win_rate = cols[2].text.strip()
            items.append(f"{item_name} ‚Äî {win_rate}")
    return items

# ===========================
# ü§ñ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ===========================

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî• –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –º–µ—Ç–∞", callback_data="meta")],
        [InlineKeyboardButton(text="‚öîÔ∏è –°–±–æ—Ä–∫–∏ –≥–µ—Ä–æ–µ–≤", callback_data="builds")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø Dota 2 –±–æ—Ç üíé\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@dp.callback_query(lambda c: c.data == "meta")
async def show_meta(callback: types.CallbackQuery):
    await callback.message.answer("–ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –º–µ—Ç—É... ‚è≥")
    heroes = get_meta_heroes()
    result = "\n".join(heroes)
    await callback.message.answer(f"üî• **–¢–æ–ø-10 –≥–µ—Ä–æ–µ–≤ –º–µ—Ç—ã:**\n\n{result}", parse_mode="Markdown")

@dp.callback_query(lambda c: c.data == "builds")
async def show_build_menu(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏ –∏–º—è –≥–µ—Ä–æ—è –ª–∞—Ç–∏–Ω–∏—Ü–µ–π (–ø—Ä–∏–º–µ—Ä: `sven`, `lion`, `invoker`):", parse_mode="Markdown")

@dp.message()
async def get_build(message: types.Message):
    hero = message.text.lower().strip().replace(" ", "-")
    await message.answer(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–±–æ—Ä–∫—É –¥–ª—è *{hero.title()}*...", parse_mode="Markdown")
    items = get_hero_items(hero)
    result = "\n".join([f"{i+1}. {x}" for i, x in enumerate(items)])
    await message.answer(f"‚öîÔ∏è **–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è {hero.title()}:**\n\n{result}", parse_mode="Markdown")

# ===========================
# üöÄ –ó–ê–ü–£–°–ö
# ===========================
async def main():
    print("Bot started... ‚úÖ")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
