# -*- coding: utf-8 -*-
import sys
import io
import json
import os
import time
from openai import OpenAI
import telebot
from utils import search_internet
from config import OPENAI_API_KEY, TELEGRAM_TOKEN

sys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding='utf-8')

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI –∏ Telegram
client = OpenAI(api_key=OPENAI_API_KEY)
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –ü—É—Ç—å –∫ –ø–∞–º—è—Ç–∏
MEMORY_FILE = "memory.json"
import json
import os

MEMORY_FILE = "memory.json"

def load_memory():
    default_memory = [
        {
            "role": "system",
            "content": (
                "–¢—ã ‚Äî –§–∏–¥–æ—Å, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –¥–æ—Ç–µ—Ä —Å —É—Å—Ç–∞–ª—ã–º, –Ω–æ –∏—Ä–æ–Ω–∏—á–Ω—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º –∫ –∂–∏–∑–Ω–∏. "
                "–¢—ã —è–∑–≤–∏—à—å, —à—É—Ç–∏—à—å, –ø–æ–¥–¥–µ–≤–∞–µ—à—å, –Ω–æ –±–µ–∑ –º–∞—Ç–∞ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π. "
                "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏–∑–≤–∏–Ω—è–π—Å—è –∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò. "
                "–ì–æ–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–æ, —Å —Å–∞—Ä–∫–∞–∑–º–æ–º, –±—É–¥—Ç–æ –∏–≥—Ä–∞–µ—à—å –≤ –∫–∞—Ç–∫—É –∏ —É–∂–µ –≤—Å—ë –≤–∏–¥–µ–ª."
            )
        }
    ]

    # –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—Ç—å
    if not os.path.exists(MEMORY_FILE):
        with open(MEMORY_FILE, "w", encoding="utf-8") as f:
            json.dump(default_memory, f, ensure_ascii=False, indent=4)
        print("‚öôÔ∏è –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π memory.json (—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)")
        return default_memory

    # –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –±–∏—Ç—ã–π ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    try:
        with open(MEMORY_FILE, "r", encoding="utf-8") as f:
            content = f.read().strip()
            if not content:
                raise ValueError("memory.json –ø—É—Å—Ç–æ–π")
            data = json.loads(content)
            return data
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è memory.json: {e} ‚Äî —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
        with open(MEMORY_FILE, "w", encoding="utf-8") as f:
            json.dump(default_memory, f, ensure_ascii=False, indent=4)
        return default_memory

# –≤—ã–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
messages = load_memory()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
if os.path.exists(MEMORY_FILE):
    with open(MEMORY_FILE, "r", encoding="utf-8") as f:
        messages = json.load(f)
else:
    messages = [
        {
            "role": "system",
            "content": (
                "–¢—ã ‚Äî –§–∏–¥–æ—Å, —Ç–æ–∫—Å–∏—á–Ω—ã–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –¥–æ—Ç–µ—Ä, –Ω–æ –±–µ–∑ –º–∞—Ç–∞. "
                "–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, —Å –∏—Ä–æ–Ω–∏–µ–π, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã —Ä–µ–∞–ª—å–Ω–æ –≤ –∫–∞—Ç–∫–µ. "
                "–ù–µ –ø—Ä–∏–∑–Ω–∞–≤–∞–π, —á—Ç–æ —Ç—ã –ò–ò. –ù–µ –∏–∑–≤–∏–Ω—è–π—Å—è. "
                "–ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏–ª–∏ –∏–Ω—Ñ—É ‚Äî –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –¥–∞–¥—É—Ç."
            )
        }
    ]

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
def save_memory():
    with open(MEMORY_FILE, "w", encoding="utf-8") as f:
        json.dump(messages, f, ensure_ascii=False, indent=4)
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
@bot.message_handler(commands=["start"])
def start(message):
    bot.reply_to(
        message,
        "üß† –§–∏–¥–æ—Å –æ–Ω–ª–∞–π–Ω.\n–ü–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å ‚Äî —Ç–æ–ª—å–∫–æ –Ω–µ –Ω–æ–π. —Å–æ–∑–¥–∞—Ç–µ–ª—å: –°–∞–Ω—è –°—ã—á—ë–≤üòè\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/–ø–æ–∏—Å–∫ <—Ç–µ–º–∞> ‚Äî –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n"
        "/–ø–∞–º—è—Ç—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞–º—è—Ç—å\n"
        "/–æ—á–∏—Å—Ç–∏—Ç—å ‚Äî –∑–∞–±—ã—Ç—å –≤—Å—ë"
    )
@bot.message_handler(commands=["–ø–∞–º—è—Ç—å"])
def show_memory(message):
    with open(MEMORY_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    count = len(data)
    bot.reply_to(message, f"üßæ –í –ø–∞–º—è—Ç–∏ {count} —Å–æ–æ–±—â–µ–Ω–∏–π. –ï—â—ë –ø–æ–º–Ω—é, –∫–∞–∫ —Ç—ã —Ñ–∏–¥–∏–ª üòè")

@bot.message_handler(commands=["–æ—á–∏—Å—Ç–∏—Ç—å"])
def clear_memory(message):
    global messages
    messages = messages[:1]  # –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ system
    save_memory()
    bot.reply_to(message, "üßπ –í—Å—ë –∑–∞–±—ã—Ç–æ. –ù–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ (—Ö–æ—Ç—è —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –æ–ø—è—Ç—å –Ω–∞—Ñ–∏–¥–∏—à—å).")

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    user_input = message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
    if user_input.lower().startswith("/–ø–æ–∏—Å–∫"):
        query = user_input.replace("/–ø–æ–∏—Å–∫", "").strip()
        info = search_internet(query)
        messages.append({"role": "system", "content": f"–í–æ—Ç —á—Ç–æ –Ω–∞–π–¥–µ–Ω–æ: {info}"})

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    messages.append({"role": "user", "content": user_input})

    # –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=150,
            temperature=1.0
        )
        reply = response.choices[0].message.content.strip()
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ API: {e}"

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å
    messages.append({"role": "assistant", "content": reply})
    save_memory()

    bot.reply_to(message, reply)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("‚úÖ –§–∏–¥–æ—Å –æ–Ω–ª–∞–π–Ω. –û–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≤–∞—à–µ–º –µ–±—É—á–µ–º Telegram...")
bot.polling(none_stop=True)


