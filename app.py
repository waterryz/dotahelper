import asyncio
import os
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from bs4 import BeautifulSoup
from dotenv import load_dotenv

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏ –µ–≥–æ –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def get_meta_heroes():
    url = "https://www.dotabuff.com/heroes/meta"
    headers = {
        "User-Agent": (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            "Chrome/127.0.0.1 Safari/537.36"
        ),
        "Accept-Language": "en-US,en;q=0.9",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Referer": "https://www.google.com/",
    }

    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—É (–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞)")

    soup = BeautifulSoup(response.text, "lxml")
    table = soup.find("table", class_="sortable")
    if not table:
        raise Exception("–¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî Dotabuff –º–æ–≥ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É")

    rows = table.find_all("tr")[1:11]
    meta_list = []
    for row in rows:
        cols = row.find_all("td")
        if len(cols) >= 4:
            hero_name = cols[1].get_text(strip=True)
            win_rate = cols[2].get_text(strip=True)
            pick_rate = cols[3].get_text(strip=True)
            meta_list.append(f"{hero_name} ‚Äî üèÜ {win_rate} | üìà {pick_rate}")

    return meta_list

def get_hero_items(hero: str):
    url = f"https://www.dotabuff.com/heroes/{hero}/items"
    headers = {
        "User-Agent": (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            "Chrome/127.0.0.1 Safari/537.36"
        ),
        "Accept-Language": "en-US,en;q=0.9",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Referer": "https://www.google.com/",
    }

    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        raise Exception("Failed to load page")

    soup = BeautifulSoup(response.text, "lxml")
    table = soup.find("table", class_="sortable")
    if not table:
        raise Exception("No table found on page")

    rows = table.find_all("tr")[1:11]
    items = []
    for row in rows:
        cols = row.find_all("td")
        if len(cols) >= 3:
            name = cols[1].get_text(strip=True)
            winrate = cols[2].get_text(strip=True)
            items.append(f"{name} ‚Äî {winrate}")
    return items

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
@dp.message(F.text == "/start")
async def start_handler(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî• –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –º–µ—Ç–∞", callback_data="meta")],
        [InlineKeyboardButton(text="‚öîÔ∏è –°–±–æ—Ä–∫–∏ –≥–µ—Ä–æ–µ–≤", callback_data="builds")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üíé –Ø Dota 2 –±–æ—Ç.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@dp.callback_query(F.data == "meta")
async def show_meta(callback: types.CallbackQuery):
    heroes = get_meta_heroes()
    text = "üî• –¢–æ–ø-10 –≥–µ—Ä–æ–µ–≤ –ø–æ –º–µ—Ç–µ:\n\n" + "\n".join(heroes)
    await callback.message.answer(text)
    await callback.answer()

@dp.callback_query(F.data == "builds")
async def ask_hero(callback: types.CallbackQuery):
    await callback.message.answer(
        "–í–≤–µ–¥–∏ –∏–º—è –≥–µ—Ä–æ—è –ª–∞—Ç–∏–Ω–∏—Ü–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>sven</b>, <b>lion</b>, <b>invoker</b>)."
    )
    await callback.answer()

@dp.message()
async def hero_build(message: types.Message):
    hero = message.text.lower().replace(" ", "-")
    try:
        items = get_hero_items(hero)
        result = "\n".join([f"{i+1}. {x}" for i, x in enumerate(items)])
        await message.answer(f"‚öîÔ∏è –°–±–æ—Ä–∫–∞ –¥–ª—è <b>{hero.title()}</b>:\n\n{result}")
    except Exception:
        await message.answer("‚ùå –ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)
    print("üöÄ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook (–µ—Å–ª–∏ –±—ã–ª)...")
    await bot.delete_webhook(drop_pending_updates=True)
    print("‚úÖ Webhook —É–¥–∞–ª—ë–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
