import os
import asyncio
import requests
from flask import Flask, request
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bs4 import BeautifulSoup
from dotenv import load_dotenv

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
RENDER_URL = os.getenv("RENDER_EXTERNAL_HOSTNAME")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

# === Flask –∏ Aiogram ===
app = Flask(__name__)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –ü–∞—Ä—Å–∏–Ω–≥ Dotabuff ===
def get_meta_heroes():
    url = "https://www.dotabuff.com/heroes/meta"
    headers = {"User-Agent": "Mozilla/5.0"}
    soup = BeautifulSoup(requests.get(url, headers=headers).text, "lxml")
    rows = soup.find_all("tr")[1:11]
    return [
        f"{r.find_all('td')[1].text.strip()} ‚Äî üèÜ {r.find_all('td')[2].text.strip()} | üìà {r.find_all('td')[3].text.strip()}"
        for r in rows
    ]

def get_hero_items(hero: str):
    url = f"https://www.dotabuff.com/heroes/{hero}/items"
    headers = {"User-Agent": "Mozilla/5.0"}
    soup = BeautifulSoup(requests.get(url, headers=headers).text, "lxml")
    rows = soup.find_all("tr")[1:11]
    return [f"{r.find_all('td')[1].text.strip()} ‚Äî {r.find_all('td')[2].text.strip()}" for r in rows]

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî• –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –º–µ—Ç–∞", callback_data="meta")],
        [InlineKeyboardButton(text="‚öîÔ∏è –°–±–æ—Ä–∫–∏ –≥–µ—Ä–æ–µ–≤", callback_data="builds")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üíé –Ø Dota 2 –±–æ—Ç.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@dp.callback_query(lambda c: c.data == "meta")
async def show_meta(callback: types.CallbackQuery):
    heroes = get_meta_heroes()
    text = "üî• –¢–æ–ø-10 –≥–µ—Ä–æ–µ–≤ –ø–æ –º–µ—Ç–µ:\n\n" + "\n".join(heroes)
    await bot.send_message(callback.from_user.id, text)

@dp.callback_query(lambda c: c.data == "builds")
async def ask_hero(callback: types.CallbackQuery):
    await bot.send_message(
        callback.from_user.id,
        "–í–≤–µ–¥–∏ –∏–º—è –≥–µ—Ä–æ—è –ª–∞—Ç–∏–Ω–∏—Ü–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, `sven`, `lion`, `invoker`)."
    )

@dp.message()
async def show_hero_build(message: types.Message):
    hero = message.text.lower().replace(" ", "-")
    try:
        items = get_hero_items(hero)
        result = "\n".join([f"{i+1}. {x}" for i, x in enumerate(items)])
        await message.answer(f"‚öîÔ∏è –°–±–æ—Ä–∫–∞ –¥–ª—è *{hero.title()}*:\n\n{result}", parse_mode="Markdown")
    except Exception:
        await message.answer("‚ùå –ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: `juggernaut`, `pudge`, `storm-spirit`")

# === Flask routes ===
@app.route("/")
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Flask + Aiogram 3.13"

@app.route("/webhook", methods=["POST"])
def webhook():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è async webhook"""
    update_data = request.get_json()
    asyncio.run(dp.feed_update(bot, types.Update.model_validate(update_data)))
    return {"ok": True}

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===
async def setup_webhook():
    if not RENDER_URL:
        print("‚ö†Ô∏è RENDER_EXTERNAL_HOSTNAME –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏ –≤—Ä—É—á–Ω—É—é –≤ Render Settings.")
        return
    webhook_url = f"https://{RENDER_URL}/webhook"
    info = requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo").json()
    if info.get("result", {}).get("url") != webhook_url:
        requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook", params={"url": webhook_url})
        print(f"üåê –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    else:
        print(f"‚úÖ –í–µ–±—Ö—É–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

def start():
    asyncio.run(setup_webhook())
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

if __name__ == "__main__":
    start()
