import os
import asyncio
from flask import Flask, request
from aiogram import Bot, Dispatcher, types
from aiogram.types import Update
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
app = Flask(__name__)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ===
@dp.message()
async def echo_handler(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã")

# === Flask routes ===
@app.route("/", methods=["GET"])
def index():
    return "‚úÖ Bot is running via Flask + Render!"

@app.route("/webhook", methods=["POST"])
async def webhook():
    update = Update.model_validate(await request.get_json())
    await dp.feed_update(bot, update)
    return "OK", 200

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ) ===
async def on_startup():
    hostname = os.getenv("RENDER_EXTERNAL_HOSTNAME")
    webhook_url = f"https://{hostname}/webhook"
    print(f"üåê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫: {webhook_url}")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π, –µ—Å–ª–∏ –µ—Å—Ç—å
    await bot.delete_webhook(drop_pending_updates=True)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π
    await bot.set_webhook(webhook_url)
    print("‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    asyncio.run(on_startup())  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    from waitress import serve
    serve(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))
