import os
import asyncio
from flask import Flask, request
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from bot_handlers import register_handlers

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv("7641143202:AAHN6GuQQrGXI4tsGwlmUR0rC3ABPohiqlc")
if not TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
register_handlers(dp)

# Flask
app = Flask(__name__)

@app.route("/")
def index():
    return "‚úÖ Flask –∏ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω—ã.", 200

@app.route("/webhook", methods=["POST"])
async def webhook():
    update = types.Update.model_validate(request.json)
    await dp.feed_update(bot, update)
    return "ok", 200

@app.before_first_request
def setup_webhook():
    hostname = os.getenv("RENDER_EXTERNAL_HOSTNAME")
    if not hostname:
        print("‚ö†Ô∏è RENDER_EXTERNAL_HOSTNAME –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å Environment Variables –≤ Render.")
    else:
        webhook_url = f"https://{hostname}/webhook"
        print(f"üåê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫: {webhook_url}")
        asyncio.run(bot.set_webhook(webhook_url))

if __name__ == "__main__":
    port = int(os.getenv("PORT", 10000))
    print(f"üöÄ Flask –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host="0.0.0.0", port=port)
