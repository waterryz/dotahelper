import os
import asyncio
from threading import Thread
from flask import Flask, request
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
import requests
from bs4 import BeautifulSoup

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
RENDER_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME', 'dotahelper.onrender.com')}"

app = Flask(__name__)

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–π event loop ===
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def get_meta_heroes():
    url = "https://www.dotabuff.com/heroes/meta"
    headers = {"User-Agent": "Mozilla/5.0"}
    soup = BeautifulSoup(requests.get(url, headers=headers).text, "lxml")
    rows = soup.find_all("tr")[1:11]
    return [
        f"{r.find_all('td')[1].text.strip()} ‚Äî üèÜ {r.find_all('td')[2].text.strip()} | üìà {r.find_all('td')[3].text.strip()}"
        for r in rows
    ]

def get_hero_items(hero: str):
    url = f"https://www.dotabuff.com/heroes/{hero}/items"
    headers = {"User-Agent": "Mozilla/5.0"}
    soup = BeautifulSoup(requests.get(url, headers=headers).text, "lxml")
    rows = soup.find_all("tr")[1:11]
    return [f"{r.find_all('td')[1].text.strip()} ‚Äî {r.find_all('td')[2].text.strip()}" for r in rows]


# === –•–µ–Ω–¥–ª–µ—Ä—ã Aiogram ===

@dp.message(F.text == "/start")
async def start_handler(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî• –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –º–µ—Ç–∞", callback_data="meta")],
        [InlineKeyboardButton(text="‚öîÔ∏è –°–±–æ—Ä–∫–∏ –≥–µ—Ä–æ–µ–≤", callback_data="builds")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üíé –Ø Dota 2 –±–æ—Ç.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


@dp.callback_query(F.data == "meta")
async def show_meta(callback: types.CallbackQuery):
    heroes = get_meta_heroes()
    text = "üî• –¢–æ–ø-10 –≥–µ—Ä–æ–µ–≤ –ø–æ –º–µ—Ç–µ:\n\n" + "\n".join(heroes)
    await callback.message.answer(text)
    await callback.answer()


@dp.callback_query(F.data == "builds")
async def ask_hero(callback: types.CallbackQuery):
    await callback.message.answer(
        "–í–≤–µ–¥–∏ –∏–º—è –≥–µ—Ä–æ—è –ª–∞—Ç–∏–Ω–∏—Ü–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>sven</b>, <b>lion</b>, <b>invoker</b>)."
    )
    await callback.answer()


@dp.message()
async def hero_build(message: types.Message):
    hero = message.text.lower().replace(" ", "-")
    try:
        items = get_hero_items(hero)
        result = "\n".join([f"{i+1}. {x}" for i, x in enumerate(items)])
        await message.answer(f"‚öîÔ∏è –°–±–æ—Ä–∫–∞ –¥–ª—è <b>{hero.title()}</b>:\n\n{result}")
    except Exception:
        await message.answer("‚ùå –ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")


# === Flask routes ===

@app.route("/", methods=["GET"])
def index():
    return "‚úÖ Dota 2 Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"


@app.route("/webhook", methods=["POST"])
def webhook():
    update_data = request.get_json()
    print("üì© –ü–æ–ª—É—á–µ–Ω –∞–ø–¥–µ–π—Ç:", update_data)
    update = types.Update.model_validate(update_data)
    asyncio.run_coroutine_threadsafe(dp.feed_update(bot, update), loop)
    return {"ok": True}


# === –ó–∞–ø—É—Å–∫–∞–µ–º event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ===
def start_loop():
    asyncio.set_event_loop(loop)
    loop.run_forever()


# === Main ===
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º event loop –≤ —Ñ–æ–Ω–µ
    Thread(target=start_loop, daemon=True).start()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    webhook_url = f"{RENDER_URL}/webhook"
    print(f"üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: {webhook_url}")
    resp = requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook?url={webhook_url}")
    print(resp.json())

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
