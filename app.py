import os
import asyncio
from flask import Flask, request
from aiogram import Bot, Dispatcher, types
from aiogram.types import Update
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
app = Flask(__name__)

# --- Telegram handlers ---
@dp.message()
async def start_handler(message: types.Message):
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Flask + Render!")

# --- Webhook route ---
@app.route("/webhook", methods=["POST"])
async def webhook():
    data = await request.get_json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return "OK", 200

# --- Index route ---
@app.route("/", methods=["GET"])
def home():
    return "üåê Flask —Å–µ—Ä–≤–µ—Ä –∂–∏–≤! –í–µ–±—Ö—É–∫ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."

# --- Webhook setup (–æ–¥–∏–Ω —Ä–∞–∑, –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ gunicorn) ---
@app.before_serving
async def setup_webhook():
    hostname = os.getenv("RENDER_EXTERNAL_HOSTNAME")
    webhook_url = f"https://{hostname}/webhook"
    print(f"üåê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫: {webhook_url}")
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(webhook_url)
    print("‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# --- Gunicorn entrypoint ---
# –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º –∑–¥–µ—Å—å, Render –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å gunicorn app:app
